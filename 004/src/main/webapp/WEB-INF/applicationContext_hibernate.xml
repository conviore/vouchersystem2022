<?xml version="1.0" encoding="UTF-8"?>
<!-- 负责系统级配置 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="   http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
		http://www.springframework.org/schema/tx    
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
		http://www.springframework.org/schema/aop    
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
		http://www.springframework.org/schema/context   
		http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:annotation-config />
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>WEB-INF/jdbc.properties</value>
		</property>
	</bean>

	<!-- 利用${}来读取配置文件中的配置项，从而对proxool连接池进行初始化 -->
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="20" />
		<property name="maxIdleTime" value="0" />
		<property name="acquireIncrement" value="5" />
		<property name="maxStatements" value="10" />
		<property name="initialPoolSize" value="10" />
		<property name="idleConnectionTestPeriod" value="60"/>
		<property name="testConnectionOnCheckin" value="true"/>
	</bean>

	<!--事务管理器-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!--定义事务拦截器bean-->
	<bean id="transactionInterceptor"
		  class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!--事务拦截器bean需要依赖注入一个事务管理器  -->
		<property name="transactionAttributes">
			<!--  下面定义事务传播属性-->
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Dao</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="sessionFactory"
		  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource"><ref local="dataSource" /> </property>
		<property name="mappingLocations">
			<value>classpath:/com/tiger/employees/*/po/*.hbm.xml </value>
		</property>
		<property name="hibernateProperties">
			<props>
				<!--
                 配置Hibernate的方言
                -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!--
                 输入由Hibernate生成的SQL语句，如果在hibernate.cfg.xml中也指定的话，会生成两条语句，在产品中最好关闭，即设为false
                -->
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	<!--  <tx:annotation-driven transaction-manager="transactionManager"/>-->
</beans>